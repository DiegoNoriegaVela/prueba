import java.io.*;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

public class MipSender {

    public static void main(String[] args) {
        String ip      = null;
        int    port    = -1;
        String filePath = null;
        String ipmName  = null;

        // Leer parámetros
        for (int i = 0; i < args.length; i++) {
            if ("--ip".equals(args[i]) && i + 1 < args.length) {
                ip = args[++i];
            } else if ("--port".equals(args[i]) && i + 1 < args.length) {
                port = Integer.parseInt(args[++i]);
            } else if ("--file".equals(args[i]) && i + 1 < args.length) {
                filePath = args[++i];
            } else if ("--ipmname".equals(args[i]) && i + 1 < args.length) {
                ipmName = args[++i];
            } else {
                System.err.println("Parámetro desconocido: " + args[i]);
                printHelp();
                System.exit(2);
            }
        }
        if (ip == null || port < 0 || filePath == null || ipmName == null) {
            System.err.println("Faltan parámetros.");
            printHelp();
            System.exit(2);
        }

        Socket socket = null;
        OutputStream out = null;
        InputStream in = null;

        try {
            // Leer archivo en memoria (o manejar streaming si es muy grande)
            byte[] fileBytes = readAllBytes(new File(filePath));
            System.out.println("Leído archivo '" + filePath + "' tamaño: " + fileBytes.length + " bytes");

            // Calcular número de bloques (asumiendo archivo ya en tamaño múltiplo de 1014 bytes)
            int BLOCK_SIZE = 1014;
            int numBlocks = (fileBytes.length + BLOCK_SIZE - 1) / BLOCK_SIZE;

            socket = new Socket(ip, port);
            out = socket.getOutputStream();
            in  = socket.getInputStream();

            // 1) Enviar Header “004”
            sendHeader004(out, ipmName);

            // 2) Enviar cada bloque como Data Record tipo 3
            for (int blk = 0; blk < numBlocks; blk++) {
                int offset = blk * BLOCK_SIZE;
                int remaining = fileBytes.length - offset;
                int len = remaining >= BLOCK_SIZE ? BLOCK_SIZE : remaining;

                // Enviamos como “Data Record (3)”
                sendDataRecord3(out, fileBytes, offset, len, blk + 1, (blk == numBlocks - 1));
                System.out.println("Enviado bloque " + (blk + 1) + " de " + numBlocks + " (bytes: " + len + ")");
            }

            // 3) Enviar Trailer “998” con conteo = numBlocks + 1
            sendTrailer998(out, numBlocks + 1);
            System.out.println("Enviado trailer 998 con conteo: " + (numBlocks + 1));

            out.flush();

            // 4) Leer respuesta del MIP
            byte[] resp = new byte[1024];
            int rlen = in.read(resp);
            if (rlen > 0) {
                String s = new String(resp, 0, rlen, StandardCharsets.US_ASCII);
                System.out.println("Respuesta MIP: " + s);
            } else {
                System.err.println("No se recibió respuesta del MIP.");
            }

            System.out.println("Envio completado.");

        } catch (Exception e) {
            System.err.println("Error en envío: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try { if (out != null) out.close(); } catch (Exception ex) {}
            try { if (in  != null) in.close();  } catch (Exception ex) {}
            try { if (socket != null) socket.close(); } catch (Exception ex) {}
        }
    }

    private static void printHelp() {
        System.out.println("Uso:");
        System.out.println("  java MipSender --ip <MIP_host> --port <MIP_port> --file <archivo.ipm> --ipmname <nombreIPM>");
        System.out.println("Ejemplo:");
        System.out.println("  java MipSender --ip 10.0.0.5 --port 12345 --file /data/myfile.ipm --ipmname R11902840");
    }

    private static void sendHeader004(OutputStream out, String ipmName) throws IOException {
        // Según el manual: record tipo “004 To Mastercard File Header”
        // Construimos: “004” + tipo “01” + “R” + ipmName (ajustar longitud de campos según AN)
        // Ejemplo sencillo: “00401R” + ipmName + CRLF
        String rec = "00401R" + ipmName + "\r\n";
        out.write(rec.getBytes(StandardCharsets.US_ASCII));
    }

    private static void sendDataRecord3(OutputStream out, byte[] data, int offset, int len, int blockNumber, boolean isLast) throws IOException {
        // Construimos el Data Record tipo “3”
        // Ejemplo: encabezado “3” + datos binarios
        // Nota: según implementacion real puede necesitar encabezado de longitud etc.
        out.write('3');
        out.write(data, offset, len);
        out.write("\r\n".getBytes(StandardCharsets.US_ASCII));
    }

    private static void sendTrailer998(OutputStream out, int blockCount) throws IOException {
        // Construir trailer tipo “998” + conteo big-endian de 4 bytes (por ejemplo) + CRLF
        String header = "998";
        byte[] countBytes = ByteBuffer.allocate(4).putInt(blockCount).array();
        out.write(header.getBytes(StandardCharsets.US_ASCII));
        out.write(countBytes);
        out.write("\r\n".getBytes(StandardCharsets.US_ASCII));
    }

    private static byte[] readAllBytes(File f) throws IOException {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        InputStream in = new FileInputStream(f);
        try {
            byte[] buf = new byte[8192];
            int n;
            while ((n = in.read(buf)) >= 0) {
                if (n > 0) bout.write(buf, 0, n);
            }
        } finally { try { in.close(); } catch (Exception ex) {} }
        return bout.toByteArray();
    }
}