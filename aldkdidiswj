// package com.scotiabank.gssvault.util;  // <- opcional

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Properties;

import com.scotiabank.gss.crypto.tool.crypt.AESFileCipher;
import com.scotiabank.gss.crypto.tool.model.EncryptionException;

public class AESFileCipherRunner {

    private static void usage() {
        System.out.println(
            "Uso:\n" +
            "  ENCRIPTAR: java -cp .;gss-crypto-tool-0.0.1-SNAPSHOT.jar AESFileCipherRunner encrypt <inPlain> <outEnc> (--key <secret> | --prop <app.properties>)\n" +
            "  DESENCRIPT: java -cp .;gss-crypto-tool-0.0.1-SNAPSHOT.jar AESFileCipherRunner decrypt <inEnc>   <outPlain> (--key <secret> | --prop <app.properties>)\n" +
            "\n" +
            "Notas:\n" +
            "  - Si usas --prop, se leerá la propiedad 'encrypt.secret'.\n" +
            "  - En Linux/Mac usa ':' en vez de ';' en el classpath.\n"
        );
    }

    public static void main(String[] args) {
        if (args.length < 4) {
            usage();
            System.exit(1);
        }

        String op = args[0].toLowerCase();          // encrypt | decrypt
        String inPath = args[1];
        String outPath = args[2];

        // Parse key source
        String key = null;
        try {
            for (int i = 3; i < args.length; i++) {
                if ("--key".equalsIgnoreCase(args[i]) && i + 1 < args.length) {
                    key = args[++i];
                } else if ("--prop".equalsIgnoreCase(args[i]) && i + 1 < args.length) {
                    key = loadKeyFromProperties(args[++i], "encrypt.secret");
                }
            }

            if (key == null || key.isEmpty()) {
                System.err.println("ERROR: no se obtuvo la clave. Usa --key <secret> o --prop <archivo.properties> con 'encrypt.secret'.");
                System.exit(2);
            }

            // Validaciones rápidas de archivos
            if (!Files.exists(Path.of(inPath))) {
                System.err.println("ERROR: no existe el archivo de entrada: " + inPath);
                System.exit(3);
            }
            Path out = Path.of(outPath);
            if (Files.exists(out)) {
                System.out.println("Aviso: el archivo de salida existe y será sobrescrito: " + outPath);
            } else {
                // Crea directorios padre si hiciera falta
                Path parent = out.getParent();
                if (parent != null) Files.createDirectories(parent);
            }

            long t0 = System.currentTimeMillis();

            if ("encrypt".equals(op)) {
                AESFileCipher.encryptContentFile(inPath, outPath, key);
                System.out.println("OK: Archivo cifrado -> " + outPath);
            } else if ("decrypt".equals(op)) {
                AESFileCipher.decryptContentFile(inPath, outPath, key);
                System.out.println("OK: Archivo descifrado -> " + outPath);
            } else {
                System.err.println("ERROR: operación desconocida: " + op);
                usage();
                System.exit(4);
            }

            long t1 = System.currentTimeMillis();
            System.out.println("Tiempo: " + (t1 - t0) + " ms");

        } catch (EncryptionException e) {
            System.err.println("Fallo de cifrado/descifrado: " + e.getMessage());
            e.printStackTrace();
            System.exit(5);
        } catch (Exception e) {
            System.err.println("Error inesperado: " + e.getMessage());
            e.printStackTrace();
            System.exit(6);
        }
    }

    private static String loadKeyFromProperties(String file, String propName) throws IOException {
        Properties p = new Properties();
        try (FileInputStream fis = new FileInputStream(file)) {
            p.load(fis);
        }
        String v = p.getProperty(propName);
        if (v == null || v.isEmpty()) {
            throw new IllegalArgumentException("No se encontró la propiedad '" + propName + "' en " + file);
        }
        return v.trim();
    }
}

javac -cp gss-crypto-tool-0.0.1-SNAPSHOT.jar AESFileCipherRunner.java
java -cp .;gss-crypto-tool-0.0.1-SNAPSHOT.jar AESFileCipherRunner encrypt "C:\ruta\plain.txt" "C:\ruta\plain.txt.enc" --key "m56jFdeY19enc51Ksjk74503g1gd457A"
java -cp .;gss-crypto-tool-0.0.1-SNAPSHOT.jar AESFileCipherRunner decrypt "C:\ruta\plain.txt.enc" "C:\ruta\plain.txt.dec" --key "m56jFdeY19enc51Ksjk74503g1gd457A"
java -cp .;gss-crypto-tool-0.0.1-SNAPSHOT.jar AESFileCipherRunner encrypt "C:\in\archivo.pdf" "C:\out\archivo.pdf.enc" --prop "C:\conf\application.properties"

